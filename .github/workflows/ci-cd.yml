name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  packages: write
  security-events: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/token-price-service

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: tokens_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      kafka:
        image: confluentinc/cp-kafka:7.3.0
        env:
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        ports:
          - 9092:9092

    steps:
    - name: Checkout code
      run: |
        git clone https://github.com/${{ github.repository }}.git .
        git checkout ${{ github.sha }}

    - name: Setup Node.js
      run: |
        curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
        sudo apt-get install -y nodejs

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint

    - name: Run tests
      run: npm run test
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/tokens_test
        KAFKA_BROKERS: localhost:9092

    - name: Run e2e tests
      run: npm run test:e2e
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/tokens_test
        KAFKA_BROKERS: localhost:9092

  build:
    needs: test
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    outputs:
      image: ${{ steps.image.outputs.image }}

    steps:
    - name: Checkout code
      run: |
        git clone https://github.com/${{ github.repository }}.git .
        git checkout ${{ github.sha }}

    - name: Set up Docker Buildx
      run: |
        docker buildx create --use
        docker buildx inspect --bootstrap

    - name: Log in to Container Registry
      run: |
        echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

    - name: Extract metadata
      id: meta
      run: |
        # Generate tags based on branch
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          TAGS="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main,${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
          TAGS="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:develop"
        else
          TAGS="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}"
        fi

        # Add SHA tag
        TAGS="$TAGS,${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${{ github.sha }}"

        echo "tags=$TAGS" >> $GITHUB_OUTPUT

    - name: Build and push Docker image
      run: |
        # Build with multiple tags
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          docker buildx build \
            --platform linux/amd64 \
            --file ./Dockerfile \
            --tag "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main" \
            --tag "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" \
            --tag "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${{ github.sha }}" \
            --push \
            .
        else
          docker buildx build \
            --platform linux/amd64 \
            --file ./Dockerfile \
            --tag "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}" \
            --tag "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${{ github.sha }}" \
            --push \
            .
        fi

    - name: Output image
      id: image
      run: echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}" >> $GITHUB_OUTPUT

  security-scan:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    permissions:
      contents: read
      packages: read
      security-events: write

    steps:
    - name: Install Trivy
      run: |
        sudo apt-get update
        sudo apt-get install wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy

    - name: Run Trivy vulnerability scanner
      run: |
        trivy image --format sarif --output trivy-results.sarif ${{ needs.build.outputs.image }}

    - name: Upload Trivy scan results to GitHub Security tab
      run: |
        # This would need to be implemented with GitHub API calls
        echo "Security scan completed. Results saved to trivy-results.sarif"

  gitops-update:
    needs: [build, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      run: |
        git clone https://github.com/${{ github.repository }}.git .
        git checkout ${{ github.ref_name }}

    - name: Configure git author
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

    - name: Update production image tag in GitOps manifests
      env:
        IMAGE_SHA_TAG: main-${{ github.sha }}
      run: |
        FILE="gitops/overlays/production/deployment-patch.yaml"
        REPO_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
        BRANCH="release/${IMAGE_SHA_TAG}"
        git checkout -b "$BRANCH"
        # Replace image tag line
        sed -i.bak "s#^\(\s*image:\s*\)${REPO_IMAGE}:.*#\1${REPO_IMAGE}:${IMAGE_SHA_TAG}#" "$FILE"
        rm -f "$FILE.bak"
        echo "Updated image to ${REPO_IMAGE}:${IMAGE_SHA_TAG} in $FILE"
        git add "$FILE"
        git commit -m "GitOps: set production image to ${REPO_IMAGE}:${IMAGE_SHA_TAG}"
        git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git "$BRANCH"

    - name: Open pull request
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        TITLE="GitOps: deploy ${GITHUB_SHA} to production"
        BODY="This PR updates production image to ${REGISTRY}/${IMAGE_NAME}:main-${GITHUB_SHA}."
        API_URL="https://api.github.com/repos/${{ github.repository }}/pulls"
        HEAD="release/main-${GITHUB_SHA}"
        BASE="main"
        curl -s -X POST -H "Authorization: token $GH_TOKEN" -H "Accept: application/vnd.github+json" \
          "$API_URL" \
          -d "{\"title\":\"$TITLE\",\"head\":\"$HEAD\",\"base\":\"$BASE\",\"body\":\"$BODY\"}"